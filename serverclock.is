/// @0.13.3
### {
	name: 'ServerClock'
	author: 'zawa-ch.'
	description: 'サーバー上の時刻を表示できるデジタル時計'
	version: '1.0.2'
}
//	設定項目
let CONFIG = {
	//	update_interval: num
	//	時計の表示の更新間隔を設定する
	//	単位はミリ秒
	update_interval: 64,
	//	textsize: num
	//	時計の文字の大きさを指定する
	textsize: 1.2,
	//	display: obj
	//	表示する項目を指定する
	display: {
		//	date: bool
		//	日付を表示する
		date: true,
		//	localclock: bool
		//	ローカルでの時刻を表示する
		localclock: false,
		//	difference: bool
		//	ローカルとの時間差を表示する
		difference: false,
	},
	//	poll_interval: num
	//	時間差を計算するためのポーリングの間隔を指定する
	//	単位はミリ秒
	poll_interval: 60000,
}

let WEEKNAME = [ 'SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT' ]

@day_of_week(date) {
	let LOCALTIME_DIFF = Date:parse( `{Date:year(date)}/{Date:month(date)}/{Date:day(date)} 0:00 UTC`) - Date:parse(`{Date:year(date)}/{Date:month(date)}/{Date:day(date)} 0:00` )
	let local_date = date + LOCALTIME_DIFF
	Math:floor(local_date / 86400000 + 4) % 7
}
@datestr(date) {
	var dy = `000{Date:year(date)}`
	dy = dy.slice(dy.len - 4, dy.len)
	var dm = `0{Date:month(date)}`
	dm = dm.slice(dm.len - 2, dm.len)
	var dd = `0{Date:day(date)}`
	dd = dd.slice(dd.len - 2, dd.len)
	`{dy}-{dm}-{dd}`
}
@timestr(date) {
	var th = `0{Date:hour(date)}`
	th = th.slice(th.len - 2, th.len)
	var tm = `0{Date:minute(date)}`
	tm = tm.slice(tm.len - 2, tm.len)
	var ts = `0{Date:second(date)}`
	ts = ts.slice(ts.len - 2, ts.len)
	var ms = `00{date%1000}`
	ms = ms.slice(ms.len - 3, ms.len)
	`{th}:{tm}:{ts}.{ms}`
}

@ServerTimeSync(hist_max, hist_min, avg_count) {
	var difference = null
	var data = []
	@poll() {
		let l1 = Date:now()
		let s = Mk:api('ping', {})
		let l2 = Date:now()
		let servertime = s.pong
		let localtime = Math:floor(l1 / 2 + l2 / 2)
		{ value: servertime - localtime, error: Math:floor((l2 - l1) / 2) }
	}
	@sync() {
		loop {
			data.push(poll())
			if data.len > hist_max { data.shift() }
			if (data.len >= hist_min) && (data.len <= hist_max) { break }
		}
		let d = data.sort(@(l, r){ l.error - r.error }).slice(0, avg_count)
		let sum = d.reduce(@(a,i,n){ { value: a.value + i.value, error: a.error + i.error } }, { value: 0, error: 0 })
		difference = { value: Math:round(sum.value / d.len), error: Math:round(sum.error / d.len) }
	}
	@convert(date) { date + difference.value }
	@current_time() { convert(Date:now()) }
	{ difference: @(){difference}, sync: sync, convert: convert, current_time: current_time }
}

let stime = ServerTimeSync(12, 5, 3)

Ui:render([ Ui:C:mfm({ size: CONFIG.textsize, font: 'monospace' }, 'textarea') ])

@on_update() {
	let lt = Date:now()
	let diff = stime.difference()
	let st = if Core:type(diff) == 'obj' { lt + stime.difference().value } else { null }
	var text = []
	if CONFIG.display.date { text.push(if Core:type(st) == 'num' { `{datestr(st)} {WEEKNAME[day_of_week(st)]}` } else { '____-__-__ ___' }) }
	text.push(if Core:type(st) == 'num' { `$[scale.x=1.3,y=1.3 {timestr(st)}]` } else { '$[scale.x=1.3,y=1.3 __:__:__.___]' })
	if CONFIG.display.localclock { text.push(`<small>Local: {timestr(lt)}</small>`) }
	if CONFIG.display.difference { text.push(if Core:type(diff) == 'obj' { `<small>{diff.value}±{diff.error} ms</small>` } else { `<small>no data</small>` }) }
	Ui:get('textarea').update({
		text: `<center>{text.join(Str:lf)}</center>`,
		size: CONFIG.textsize,
		font: 'monospace' })
}

@on_timesync() {
	stime.sync()
}

Async:interval(CONFIG.update_interval, on_update, true)
Async:interval(CONFIG.poll_interval, on_timesync, true)
