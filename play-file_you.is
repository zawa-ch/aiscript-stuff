/// 0.13.3
### {
	name: "あなたをファイル化"
	author: "zawa-ch."
	version: "1.0.1"
	description: "あなたをファイル化するとどんなファイルになるのか...?"
	license: {
		name: "MIT License"
		href: "http://www.opensource.org/licenses/mit-license.php"
	}
}
// このPlayは診断メーカーの「あなたをファイル化したったー」のリメイクです。
// リメイク元のメーカーも確認してみてください
// https://shindanmaker.com/620756
//
// ## このソースをコピーするにあたっての重要な注意 ##
// このPlayスクリプトで使用されるデータセットは規模があまりにも大きいため、
// 複数のPageにJSONを記述し、Misskey APIによって取得しています
// **このスクリプトの単純なコピーのみでは動作しません**
let HASHTAG = "#あなたをファイル化"
@load_filetypes() {
	let data_source=[
		//	ここにデータセットを記述したPageのIDを列挙してください
	]
	var result = []
	for let i, data_source.len {
		let jsontxt = Mk:api("pages/show", {pageId: data_source[i]}).content[0].text
		result = result.concat(Json:parse(jsontxt))
	}
	result
}

@rand_fs(rnd_f) {
	let n = rnd_f(0, 7)
	var r = 0
	for n {
		r = r + rnd_f(0, 1024)
		r = r * (1 + rnd_f(0, 1024))
	}
	r + rnd_f(0, 1024)
}

let fs_unit = [ "Byte", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
@fs_class(i) {
	if i < 1024 { { n: 0, r: i } }
	else {
		let s = fs_class(i / 1024)
		{ n: s.n + 1, r: s.r }
	}
}

@p10(i) {
	if i < 0 { null }
	if i == 0 { 1 }
	else { 10 * p10(i - 1) }
}
@round_sig(value, digit) {
	if value < p10(digit - 1) {
		round_sig((value * 10) digit) / 10
	} elif p10(digit) < value {
		round_sig((value / 10) digit) * 10
	} else {
		Math:round(value)
	}
}

@draw(id, callback) {
	let random = Math:gen_rng(`{USER_ID}:{id}`)
	let ft = filetypes[random(0, filetypes.len)]
	let fe = ft.ext[random(0, ft.ext.len)]
	let fs = rand_fs(random)
	let fs_h = `{round_sig(fs_class(fs).r,4)} {fs_unit[(fs_class(fs).n)]}`
	let result = {
		user: USER_ID
		id: id
		filename: `{USER_USERNAME}.{fe}`
		filesize: fs
		mimetype: ft.mime
		mimedescription: ft.description
		text: `$[tada.speed=0s {USER_USERNAME}.{fe}]{Str:lf}{fs_h}<small>({fs} Bytes)</small>{Str:lf}<small>{ft.description}<{ft.mime}>{Str:lf}</small>`
	}
	if callback != null { callback(result) }
	result
}

@on_draw(result) {
	Ui:render([
		Ui:C:container({
			children: [
				Ui:C:mfm({ text: "ファイル化が完了しました" })
				Ui:C:mfm({ text: result.text })
			]
		})
		Ui:C:container({
			align: 'center'
			children: [
				Ui:C:postFormButton({
					text: "投稿する"
					rounded: true
					primary: true
					form: {
						text: `{USER_NAME}をファイル化しました{Str:lf}{Str:lf}{result.text}{Str:lf}{HASHTAG}{Str:lf}{THIS_URL}`
					}
				})
			]
		})
	])
}

@form_dataprepare() {
	Ui:render([
		Ui:C:container({
			children: [
				Ui:C:mfm({ text: `データセット取得中...{Str:lf}これには時間がかかることがあります` })
			]
		})
	])
}

@form_preprocess() {
	Ui:render([
		Ui:C:container({
			children: [
				Ui:C:mfm({ text: "ファイル化を実行しています..." })
			]
		})
	])
}

form_dataprepare()
let filetypes = load_filetypes()
form_preprocess()
draw(`{Date:year()}-{Date:month()}-{Date:day()}` on_draw)
