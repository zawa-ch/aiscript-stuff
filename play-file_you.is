/// @ 0.17.0
### {
	name: "あなたをファイル化"
	author: "zawa-ch."
	version: "1.0.2"
	description: "あなたをファイル化するとどんなファイルになるのか...?"
	license: {
		name: "MIT License"
		href: "http://www.opensource.org/licenses/mit-license.php"
	}
}
// このPlayは診断メーカーの「あなたをファイル化したったー」のリメイクです。
// リメイク元のメーカーも確認してみてください
// https://shindanmaker.com/620756
//
// ## このソースをコピーするにあたっての重要な注意 ##
// このPlayスクリプトで使用されるデータセットは規模があまりにも大きいため、
// 複数のPageにJSONを記述し、Misskey APIによって取得しています
// **このスクリプトの単純なコピーのみでは動作しません**
@load_filetypes() {
	let data_source=[
		//	ここにデータセットを記述したPageのIDを列挙してください
	]
	var result = []
	for let i, data_source.len {
		let jsontxt = Mk:api("pages/show", {pageId: data_source[i]}).content[0].text
		result = result.concat(Json:parse(jsontxt))
	}
	result
}

let fs_unit = [ "Byte", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
:: FileYou {
@hashtag() {'#あなたをファイル化'}
@rand_filesize(rnd) {
	let p = rnd(0,89)
	if (p==0) { return 0 }
	var r = [1]
	for p { r.unshift(rnd()) }
	r.map(@(i){Math:round(i)}).reduce(@(b,c,i){b*2+c},0)
}
@filesize_to_str(size) {
	let fs_unit = ["Byte", "kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
	@c(i) {
		if i < 1024 { { n: 0, r: i } }
		else {
			let s = c(i / 1024)
			{ n: s.n + 1, r: s.r }
		}
	}
	@p(i) {
		if (i < 10) { 1 } else { 1 + p(i/10) }
	}
	@round_str(num,p) {
		if num>=0&&num<Math:Infinity&&(Math:trunc(p)>0) {
			let s = Math:round(Core:range(1,Math:trunc(p)).reduce(@(b,c,i){b*10},num)).to_str()
			[ if s.len>Math:trunc(p) {''} else {'0'}, s.slice(0,s.len-Math:trunc(p)), '.', if s.len>=Math:trunc(p) {''} else {Core:range(1,Math:trunc(p)-s.len).map(@(i){'0'}).join()}, s.slice(s.len-Math:trunc(p),s.len) ].join()
		} elif num<=0&&num>(0-Math:Infinity)&&(Math:trunc(p)>0) {
			let s = Math:round(Core:range(1,Math:trunc(p)).reduce(@(b,c,i){b*10},0-num)).to_str()
			[ '-', if s.len>Math:trunc(p) {''} else {'0'}, s.slice(0,s.len-Math:trunc(p)), '.', if s.len>=Math:trunc(p) {''} else {Core:range(1,Math:trunc(p)-s.len).map(@(i){'0'}).join()}, s.slice(s.len-Math:trunc(p),s.len) ].join()
		} else {
			Math:round(num).to_str()
		}
	}
	let u = c(size)
	let s = if u.n>0 {round_str(u.r,4-p(u.r))} else {u.r}
	`{s}{fs_unit[u.n]}`
}
@draw(source,name,seed) {
	let r = Math:gen_rng(`{name}:{seed}`)
	let ft = source[r(0, source.len - 1)]
	let fe = ft.ext[r(0, ft.ext.len - 1)]
	let fs = rand_filesize(r)
	{
		name: name
		seed: seed
		filename: `{name}.{fe}`
		filesize: fs
		mimetype: ft.mime
		mimedescription: ft.description
		text: `$[tada.speed=0s {name}.{fe}]{Str:lf}{filesize_to_str(fs)}<small>({fs} Bytes)</small>{Str:lf}<small>{ft.description}<{ft.mime}>{Str:lf}</small>`
	}
}
}

@on_draw(result) {
	Ui:render([
		Ui:C:container({
			children: [
				Ui:C:mfm({ text: "ファイル化が完了しました" })
				Ui:C:mfm({ text: result.text })
			]
		})
		Ui:C:container({
			align: 'center'
			children: [
				Ui:C:postFormButton({
					text: "投稿する"
					rounded: true
					primary: true
					form: {
						text: `{USER_NAME}をファイル化しました{Str:lf}{Str:lf}{result.text}{Str:lf}{FileYou:hashtag()}{Str:lf}{THIS_URL}`
					}
				})
			]
		})
	])
}

@form_dataprepare() {
	Ui:render([
		Ui:C:container({
			children: [
				Ui:C:mfm({ text: `データセット取得中...{Str:lf}これには時間がかかることがあります` })
			]
		})
	])
}

@form_preprocess() {
	Ui:render([
		Ui:C:container({
			children: [
				Ui:C:mfm({ text: "ファイル化を実行しています..." })
			]
		})
	])
}

form_dataprepare()
let filetypes = load_filetypes()
form_preprocess()
draw(`{Date:year()}-{Date:month()}-{Date:day()}` on_draw)
