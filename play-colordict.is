// @ 0.17.0
### {
	name: 'Color Dictionary'
	author: 'zawa-ch.'
	description: '色のサンプルとその要素'
	version: '1.0.2'
	license: {
		name: "MIT License"
		href: "http://www.opensource.org/licenses/mit-license.php"
	}
}

// color.is
// 色空間の相互変換を行うライブラリ
// version 1.0.3
// Copyright 2024 zawa-ch. licensed under MIT License

:: Color {
@srgb(r,g,b) {{red: r, green: g, blue: b}}
@is_srgb(o) { (Core:type(o)=='obj')&&(Obj:has(o,'red'))&&(Core:type(o.red)=='num')&&(Obj:has(o,'green'))&&(Core:type(o.green)=='num')&&(Obj:has(o,'blue'))&&(Core:type(o.blue)=='num') }
@is_insrgbgamut(c) { (is_srgb(c))&&(c.red>=0)&&(c.red<=1)&&(c.green>=0)&&(c.green<=1)&&(c.blue>=0)&&(c.blue<=1) }
@hsv(h,s,v) {{hue: h, saturation: s, value: v}}
@is_hsv(o) { (Core:type(o)=='obj')&&(Obj:has(o,'hue'))&&(Core:type(o.hue)=='num')&&(Obj:has(o,'saturation'))&&(Core:type(o.saturation)=='num')&&(Obj:has(o,'value'))&&(Core:type(o.value)=='num') }
@hls(h,l,s) {{hue: h, saturation: s, lightness: l}}
@is_hls(o) { (Core:type(o)=='obj')&&(Obj:has(o,'hue'))&&(Core:type(o.hue)=='num')&&(Obj:has(o,'saturation'))&&(Core:type(o.saturation)=='num')&&(Obj:has(o,'lightness'))&&(Core:type(o.lightness)=='num') }
@ycbcr(y,cb,cr) {{illuminance: y, cb: cb, cr: cr}}
@is_ycbcr(o) { (Core:type(o)=='obj')&&(Obj:has(o,'illuminance'))&&(Core:type(o.illuminance)=='num')&&(Obj:has(o,'cb'))&&(Core:type(o.cb)=='num')&&(Obj:has(o,'cr'))&&(Core:type(o.cr)=='num') }
@xyz(x,y,z) {{x: x, y: y, z: z}}
@is_xyz(o) { (Core:type(o)=='obj')&&(Obj:has(o,'x'))&&(Core:type(o.x)=='num')&&(Obj:has(o,'y'))&&(Core:type(o.y)=='num')&&(Obj:has(o,'z'))&&(Core:type(o.z)=='num') }
@xyy(x,y,ly) {{illuminance: ly, point_x: x, point_y: y}}
@is_xyy(o) { (Core:type(o)=='obj')&&(Obj:has(o,'illuminance'))&&(Core:type(o.illuminance)=='num')&&(Obj:has(o,'point_x'))&&(Core:type(o.point_x)=='num')&&(Obj:has(o,'point_y'))&&(Core:type(o.point_y)=='num') }
@lab(l,a,b) {{l_star: l, a_star: a, b_star: b}}
@is_lab(o) { (Core:type(o)=='obj')&&(Obj:has(o,'l_star'))&&(Core:type(o.l_star)=='num')&&(Obj:has(o,'a_star'))&&(Core:type(o.a_star)=='num')&&(Obj:has(o,'b_star'))&&(Core:type(o.b_star)=='num') }
@hex_to_srgb(hex) {
	if Core:type(hex)!='str' {return Error:create('INVALID_ARGUMENT', {text: 'hex expect string', callee: 'Color:hex_to_srgb'})}
	let d = match hex.len {
		3 => 15
		6 => 255
		12 => 65535
		* => Error:create('INVALID_ARGUMENT', { text: `String hex length invalid.`, callee: 'Color:hex_to_srgb' })
	}
	if Core:type(d) != 'num' { return d }
	return Color:srgb(Num:from_hex(hex.slice(0,hex.len/3))/d,Num:from_hex(hex.slice(hex.len/3,hex.len/3*2))/d,Num:from_hex(hex.slice(hex.len/3*2, hex.len))/d)
}
@srgb_to_hex24(color) {
	if !is_srgb(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not sRGB color type', callee: 'Color:srgb_to_hex24'})}
	@h(v) {(`00{Num:to_hex(Math:round(Math:max(Math:min(v,1),0)*255))}`).slice((`00{Num:to_hex(Math:round(Math:max(Math:min(v,1),0)*255))}`).len-2,(`00{Num:to_hex(Math:round(Math:max(Math:min(v,1),0)*255))}`).len)}
	`{h(color.red)}{h(color.green)}{h(color.blue)}`
}
@srgb_to_hsv(color) {
	if !is_srgb(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not sRGB color type', callee: 'Color:srgb_to_hsv'})}
	let min = Math:min(Math:min(color.red,color.green),color.blue)
	let max = Math:max(Math:max(color.red,color.green),color.blue)
	return Color:hsv(match min {
		max => 0
		color.blue => 60*(color.green-color.red)/(max-min)+60
		color.red => 60*(color.blue-color.green)/(max-min)+180
		color.green => 60*(color.red-color.blue)/(max-min)+300
	},if max>0 {(max-min)/max} else {0},max)
}
@hsv_to_srgb(color) {
	if !is_hsv(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not HSV color type', callee: 'Color:hsv_to_srgb'})}
	let c = color.value*color.saturation
	let h = color.hue%360
	return match Math:trunc(h/60) {
		0 => Color:srgb(color.value,color.value-c*(1-h/60),color.value-c)
		1 => Color:srgb(color.value-c*(h-60)/60,color.value,color.value-c)
		2 => Color:srgb(color.value-c,color.value,color.value-c*(1-(h-120)/60))
		3 => Color:srgb(color.value-c,color.value-c*(h-180)/60,color.value)
		4 => Color:srgb(color.value-c*(1-(h-240)/60),color.value-c,color.value)
		5 => Color:srgb(color.value,color.value-c,color.value-c*(h-300)/60)
		* => Color:srgb(color.value-c,color.value-c,color.value-c)
	}
}
@srgb_to_hls(color) {
	if !is_srgb(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not sRGB color type', callee: 'Color:srgb_to_hls'})}
	let min = Math:min(Math:min(color.red,color.green),color.blue)
	let max = Math:max(Math:max(color.red,color.green),color.blue)
	return Color:hls(match min {
		max => 0
		color.blue => 60*(color.green-color.red)/(max-min)+60
		color.red => 60*(color.blue-color.green)/(max-min)+180
		color.green => 60*(color.red-color.blue)/(max-min)+300
	},(max+min)/2,if (max+min!=2)&&(max+min!=0) {(max-min)/(1-if (max+min)>=1 {(max+min)-1} else {1-max-min})} else {0})
}
@hls_to_srgb(color) {
	if !is_hls(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not HLS color type', callee: 'Color:hls_to_srgb'})}
	let min = color.lightness-color.saturation*(1-if color.lightness>=0.5 {2*color.lightness-1} else {1-2*color.lightness})/2
	let max = color.lightness+color.saturation*(1-if color.lightness>=0.5 {2*color.lightness-1} else {1-2*color.lightness})/2
	let h = color.hue%360
	return match Math:trunc(h/60) {
		0 => Color:srgb(max,min+(max-min)*h/60,min)
		1 => Color:srgb(min+(max-min)*(120-h)/60,max,min)
		2 => Color:srgb(min,max,min+(max-min)*(h-120)/60)
		3 => Color:srgb(min,min+(max-min)*(240-h)/60,max)
		4 => Color:srgb(min+(max-min)*(h-240)/60,min,max)
		5 => Color:srgb(max,min,min+(max-min)*(360-h)/60)
		* => Color:srgb(min,min,min)
	}
}
@srgb_to_ycbcr(color) {
	if !is_srgb(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not sRGB color type', callee: 'Color:srgb_to_ycbcr'})}
	let y = 0.2126*color.red+0.7152*color.green+0.0722*color.blue
	return Color:ycbcr(y,(color.blue-y)/1.8556,(color.red-y)/1.5748)
}
@ycbcr_to_srgb(color) {
	if !is_ycbcr(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not YCbCr color type', callee: 'Color:ycbcr_to_srgb'})}
	return Color:srgb(color.illuminance+1.5748*color.cr,color.illuminance-0.187324*color.cb-0.468124*color.cr,color.illuminance+1.8556*color.cb)
}
@srgb_to_xyz(color) {
	if !is_srgb(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not sRGB color type', callee: 'Color:srgb_to_xyz'})}
	@p(v) { if v<=0.04045 {v/12.92} else {Math:pow((v+0.055)/1.055,2.4)} }
	// 2度視野, D65光源
	return Color:xyz(p(color.red)*0.4124+p(color.green)*0.3576+p(color.blue)*0.1805,p(color.red)*0.2126+p(color.green)*0.7152+p(color.blue)*0.0722,p(color.red)*0.0193+p(color.green)*0.1192+p(color.blue)*0.9505)
}
@xyz_to_srgb(color) {
	if !is_xyz(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not CIE XYZ color type', callee: 'Color:xyz_to_srgb'})}
	@p(v) { if v<=0.0031308 { v*12.92 } else { 1.055*Math:pow(v,1/2.4)-0.055 } }
	return Color:srgb(p(color.x*3.2406-color.y*1.5372-color.z*0.4986),p(0-color.x*0.9689+color.y*1.8758+color.z*0.0415),p(color.x*0.0557-color.y*0.2040+color.z*1.0570))
}
@whitepoint() { Color:srgb_to_xyz(Color:srgb(1,1,1)) }
@xyz_to_xyy(color) {
	if !is_xyz(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not CIE XYZ color type', callee: 'Color:xyz_to_xyy'})}
	let wp = Color:whitepoint()
	let s = color.x+color.y+color.z
	let ws = wp.x+wp.y+wp.z
	return Color:xyy(if s>0 {color.x/s} else {wp.x/ws},if s>0 {color.y/s} else {wp.y/ws},color.y)
}
@xyy_to_xyz(color) {
	if !is_xyy(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not CIE xyY color type', callee: 'Color:xyy_to_xyz'})}
	return Color:xyz(color.illuminance/color.point_y*color.point_x,color.illuminance,color.illuminance/color.point_y*(1-color.point_x-color.point_y))
}
@xyz_to_lab(color) {
	if !is_xyz(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not CIE XYZ color type', callee: 'Color:xyz_to_lab'})}
	@p(v) { if v > Math:pow(6/29,3) {Math:pow(v,1/3)} else {Math:pow(6/29,2)*v/3+4/29}}
	let wp = Color:whitepoint()
	return Color:lab(116*p(color.y/wp.y)-16,500*(p(color.x/wp.x)-p(color.y/wp.y)),200*(p(color.y/wp.y)-p(color.z/wp.z)))
}
@lab_to_xyz(color) {
	if !is_lab(color) {return Error:create('INVALID_ARGUMENT', {text: 'color is not CIE L*a*b* color type', callee: 'Color:lab_to_xyz'})}
	@p(v,b) { if v > 6/29 {b*Math:pow(v,3)} else {(v-16/116)*3*Math:pow(6/29,2)*b} }
	let wp = Color:whitepoint()
	return Color:xyz(p((color.l_star+16)/116+color.a_star/500,wp.x),p((color.l_star+16)/116,wp.y),p((color.l_star+16)/116-color.b_star/200,wp.z))
}
}

@discard(value) {null}
@seq(arr_f) {arr_f.reduce(@(b,c,i){b.concat([c()])},[])}
@fast_construct(list) {
	match Core:type(list) {
		'obj' => Obj:kvs(list).map(@(i){ [i[0], i[1]()] }).reduce(@(b,c,i){
			Obj:set(b,c[0],c[1])
			b
		},{})
		'arr' => list.map(@(i){i()})
		* => list
	}
}

@tr() {{
	elements: @(){'色要素'}
	scheme: @(){'配色'}
	colorspace: @(){'色空間'}
	sample: @(){'サンプル'}
	scale: @(){'スケール'}
	hexcolor: @(){'16進数'}
	srgbcolor: @(){'sRGB'}
	srgb_r: @(){'赤'}
	srgb_g: @(){'緑'}
	srgb_b: @(){'青'}
	hsvcolor: @(){'HSV'}
	hsv_h: @(){'色相'}
	hsv_s: @(){'彩度'}
	hsv_v: @(){'明度'}
	hlscolor: @(){'HLS'}
	hls_h: @(){'色相'}
	hls_l: @(){'輝度'}
	hls_s: @(){'彩度'}
	ycbcrcolor: @(){'YCbCr'}
	ycbcr_y: @(){'輝度'}
	ycbcr_b: @(){'青色差'}
	ycbcr_r: @(){'赤色差'}
	xyycolor: @(){'CIE xyY (D65光源, 2°標準観測者)'}
	xyy_x: @(){'x位置'}
	xyy_y: @(){'y位置'}
	xyy_l: @(){'輝度'}
	labcolor: @(){'CIE L*a*b*'}
	lab_l: @(){'輝度'}
	lab_a: @(){'a*位置'}
	lab_b: @(){'b*位置'}
	out_gamut: @() {'sRGB色域外'}
	scheme_complementary: @() {'Complementary'}
	scheme_triads: @() {'Triads'}
	scheme_analogous: @() {'Analogous'}
	scheme_splitcomp: @() {'Split Complementary'}
	scheme_tetrad: @() {'Tetrad'}
	scheme_pentad: @() {'Pentad'}
	scheme_hexad: @() {'Hexad'}
	notes_title: @(){'注意事項'}
	notes_content: @(){ [
		'このAiScriptで得られる値の精度についての保証はありません。あくまで参考程度にご活用ください。'
	].join(Str:lf) }
}}
@sample_container(rgb) {
	let i = Ui:C:container({children: [], bgColor: '#000', borderWidth: 1, padding: 12, rounded: true, hidden: false})
	@u(v) {i.update({bgColor: `rgb({v.red*100}%,{v.green*100}%,{v.blue*100}%)`})}
	u(rgb)
	{ui: i, update: u}
}
@color_tag_text(name, srgb) {
	@f() { if Color:srgb_to_xyz(srgb).y>0.5 {'000'} else {'fff'} }
	@t() {
		if name.len > 0 { name }
		elif Color:is_insrgbgamut(srgb) { `{Color:srgb_to_hex24(srgb)}` }
		else { `({tr().out_gamut()})` }
	}
	`$[border.width=2,radius=2,color={Color:srgb_to_hex24(srgb)} $[bg.color={Color:srgb_to_hex24(srgb)} $[fg.color={f()} {t()}]]]`
}
@color_list_mfm(prefix, list, joiner, on_click) {
	let l = list.map(@(i){ Obj:merge(i, { id: Util:uuid(), text: color_tag_text(i.name, i.color) }) } )
	Ui:C:mfm({ text: [prefix, Str:lf, l.map(@(i){ `$[clickable.ev={i.id} {i.text}]` }).join(joiner)].join(), onClickEv: @(e){ if Core:type(on_click)=='fn' && l.filter(@(i){ i.id == e }).len==1 { on_click(l.filter(@(i){ i.id == e })[0]) } } })
}
@hexvalueinput(label_text, value, on_input) {
	var t = [value]
	let i = Ui:C:textInput({ label: label_text, default: value, onInput: @(v){ if Core:type(Color:hex_to_srgb(v))!='error' {seq([@(){t[0]=v}, @(){ if Core:type(on_input)=='fn' {on_input(v)} }])} } })
	{ ui: i, value: @(){t[0]}, set_value: @(v){ discard(seq([@(){t[0]=v}, @(){ i.update({default: v}) }])) } }
}
@numvalueinput(label_text, value, on_input) {
	var t = [value]
	let i = Ui:C:numberInput({ label: label_text, default: value, onInput: @(v){ seq([@(){t[0]=v}, @(){ if Core:type(on_input)=='fn' {on_input(v)} }]) } })
	{ ui: i, value: @(){t[0]}, set_value: @(v){ discard(seq([@(){t[0]=v}, @(){ i.update({default: v}) }])) } }
}
@loopvalueinput(label_text, value, max, on_input) {
	@r(v){if v>=0 { v%max } elif v<0 { (v%max)+max } else { v }}
	var t = [value]
	let i = Ui:C:numberInput({ label: `{label_text}(0..{max})`, default: value, onInput: @(v){ seq([@(){t[0]=r(v)}, @(){ if v!=(r(v)) { i.update({default: r(v)}) } }, @(){ if Core:type(on_input)=='fn' {on_input(r(v))} }]) } })
	{ ui: i, value: @(){t[0]}, set_value: @(v){ discard(seq([@(){t[0]=r(v)}, @(){ i.update({default: r(v)}) }])) } }
}
@scalevalueinput(label_text, value, scale, on_input) {
	var t = [value, scale]
	let i = Ui:C:numberInput({ label: `{label_text}(1/{scale})`, default: value*scale, onInput: @(v){ seq([@(){t[0]=v/t[1]}, @(){ if Core:type(on_input)=='fn' {on_input(v/t[1])} }]) } })
	{ ui: i, value: @(){t[0]}, scale: @(){t[1]}, set_value: @(v){ discard(seq([@(){t[0]=v}, @(){ i.update({default: v*t[1]}) }])) }, set_scale: @(v){ discard(seq([@(){t[1]=v}, @(){ i.update({label: `{label_text}(1/{v})`, default: t[0]*v}) }])) } }
}
@scaleselect(label_text, items, iv, on_change) { Ui:C:select({label: label_text, items: items.map(@(i){{text: `0..{i}`, value: i.to_str()}}), default: iv.to_str(), onChange: @(v){ if Core:type(on_change)=='fn' { on_change(v.to_num()) } }}) }
@hexinput(iv) {
	@to_srgb() { if Core:type(Color:hex_to_srgb(f[1].value()))!='error' {Color:hex_to_srgb(f[1].value())} else {Color:srgb(0,0,0)} }
	@update_sample() { f[0].update(to_srgb()) }
	let f = [sample_container(Color:srgb(0,0,0)), hexvalueinput(tr().hexcolor(), if Core:type(Color:hex_to_srgb(iv))!='error' {iv} else {'000000'}, @(v){ update_sample() })]
	update_sample()
	{
		form: Ui:C:container({children: [f[1].ui,Ui:C:container({children: [Ui:C:text({text: tr().sample()}),f[0].ui]})]})
		get_value: @(){ f[1].value() }
		set_value: @(v){if Core:type(Color:hex_to_srgb(v))!='error' { discard(seq([@(){f[1].set_value(v)}, update_sample])) } }
	}
}
@srgbinput(iv) {
	@to_srgb() { Color:srgb(f[1].value(), f[2].value(), f[3].value()) }
	@update_sample() { f[0].update(to_srgb()) }
	let f = [ sample_container(Color:srgb(0,0,0)), scalevalueinput(tr().srgb_r(), iv.red, 100, @(){ update_sample() }), scalevalueinput(tr().srgb_g(), iv.green, 100, @(){ update_sample() }), scalevalueinput(tr().srgb_b(), iv.blue, 100, @(){ update_sample() }) ]
	let sc = scaleselect(tr().scale(), [15, 100, 255, 65535], 100,  @(v){[ f[1].set_scale(v), f[2].set_scale(v), f[3].set_scale(v) ]})
	update_sample()
	{
		form: Ui:C:container({children: [sc, f[1].ui,f[2].ui,f[3].ui,Ui:C:container({children: [Ui:C:text({text: tr().sample()}),f[0].ui]})]})
		get_value: @(){ Color:srgb(f[1].value(), f[2].value(), f[3].value()) }
		set_value: @(v){ if Color:is_srgb(v) { discard(seq([@(){[ f[1].set_value(v.red), f[2].set_value(v.green), f[3].set_value(v.blue) ]}, update_sample])) } }
	}
}
@hsvinput(iv) {
	@to_srgb() {Color:hsv_to_srgb(Color:hsv(f[1].value(), f[2].value(), f[3].value()))}
	@update_sample() {f[0].update(to_srgb())}
	let f = [ sample_container(Color:srgb(0,0,0)), loopvalueinput(tr().hsv_h(), iv.hue, 360, @(){ update_sample() }), scalevalueinput(tr().hsv_s(), iv.saturation, 100, @(){ update_sample() }), scalevalueinput(tr().hsv_v(), iv.value, 100, @(){ update_sample() }) ]
	let sc = scaleselect(tr().scale(), [15, 100, 255, 65535], 100,  @(v){[ f[2].set_scale(v), f[3].set_scale(v) ]})
	update_sample()
	{
		form: Ui:C:container({children: [sc,f[1].ui,f[2].ui,f[3].ui,Ui:C:container({children: [Ui:C:text({text: tr().sample()}),f[0].ui]})]})
		get_value: @(){ Color:hsv(f[1].value(), f[2].value(), f[3].value()) }
		set_value: @(v){ if Color:is_hsv(v) { discard(seq([@(){[ f[1].set_value(v.hue), f[2].set_value(v.saturation), f[3].set_value(v.value) ]}, update_sample])) } }
	}
}
@hlsinput(iv) {
	@to_srgb() {Color:hls_to_srgb(Color:hls(f[1].value(), f[2].value(), f[3].value()))}
	@update_sample() {f[0].update(to_srgb())}
	let f = [ sample_container(Color:srgb(0,0,0)), loopvalueinput(tr().hls_h(), iv.hue, 360, @(){ update_sample() }), scalevalueinput(tr().hls_l(), iv.lightness, 100, @(){ update_sample() }), scalevalueinput(tr().hls_s(), iv.saturation, 100, @(){ update_sample() }) ]
	let sc = scaleselect(tr().scale(), [15, 100, 255, 65535], 100,  @(v){[ f[2].set_scale(v), f[3].set_scale(v) ]})
	update_sample()
	{
		form: Ui:C:container({children: [sc,f[1].ui,f[2].ui,f[3].ui,Ui:C:container({children: [Ui:C:text({text: tr().sample()}),f[0].ui]})]})
		get_value: @(){ Color:hls(f[1].value(), f[2].value(), f[3].value()) }
		set_value: @(v){ if Color:is_hls(v) { discard(seq([@(){[ f[1].set_value(v.hue), f[2].set_value(v.lightness), f[3].set_value(v.saturation) ]}, update_sample])) } }
	}
}
@ycbcrinput(iv) {
	@to_srgb() {Color:ycbcr_to_srgb(Color:ycbcr(f[1].value(), f[2].value(), f[3].value()))}
	@update_sample() {f[0].update(to_srgb())}
	let f = [ sample_container(Color:srgb(0,0,0)), scalevalueinput(tr().ycbcr_y(), iv.illuminance, 100, @(){ update_sample() }), scalevalueinput(tr().ycbcr_b(), iv.cb, 100, @(){ update_sample() }), scalevalueinput(tr().ycbcr_r(), iv.cr, 100, @(){ update_sample() }) ]
	update_sample()
	{
		form: Ui:C:container({children: [f[1].ui,f[2].ui,f[3].ui,Ui:C:container({children: [Ui:C:text({text: tr().sample()}),f[0].ui]})]})
		get_value: @(){ Color:ycbcr(f[1].value(), f[2].value(), f[3].value()) }
		set_value: @(v){ if Color:is_ycbcr(v) {  discard(seq([@(){[ f[1].set_value(v.illuminance), f[2].set_value(v.cb), f[3].set_value(v.cr) ]}, update_sample])) } }
	}
}
@xyyinput(iv) {
	@to_srgb() {Color:xyz_to_srgb(Color:xyy_to_xyz(Color:xyy(f[1].value(), f[2].value(), f[3].value())))}
	@update_sample() {f[0].update(to_srgb())}
	let f = [ sample_container(Color:srgb(0,0,0)), scalevalueinput(tr().xyy_x(), iv.point_x, 1000, @(){ update_sample() }), scalevalueinput(tr().xyy_y(), iv.point_y, 1000, @(){ update_sample() }), scalevalueinput(tr().xyy_l(), iv.illuminance, 100, @(){ update_sample() }) ]
	update_sample()
	{
		form: Ui:C:container({children: [f[1].ui,f[2].ui,f[3].ui,Ui:C:container({children: [Ui:C:text({text: tr().sample()}),f[0].ui]})]})
		get_value: @(){ Color:xyy(f[1].value(), f[2].value(), f[3].value()) }
		set_value: @(v){ if Color:is_xyy(v) { discard(seq([@(){[ f[1].set_value(v.point_x), f[2].set_value(v.point_y), f[3].set_value(v.illuminance) ]}, update_sample])) } }
	}
}
@labinput(iv) {
	@to_srgb() {Color:xyz_to_srgb(Color:lab_to_xyz(Color:lab(f[1].value(), f[2].value(), f[3].value())))}
	@update_sample() {f[0].update(to_srgb())}
	let f = [ sample_container(Color:srgb(0,0,0)), numvalueinput(tr().lab_l(), iv.l_star, @(){ update_sample() }), numvalueinput(tr().lab_a(), iv.a_star, @(){ update_sample() }), numvalueinput(tr().lab_b(), iv.b_star, @(){ update_sample() }) ]
	update_sample()
	{
		form: Ui:C:container({children: [f[1].ui,f[2].ui,f[3].ui,Ui:C:container({children: [Ui:C:text({text: tr().sample()}),f[0].ui]})]})
		get_value: @(){ Color:lab(f[1].value(), f[2].value(), f[3].value()) }
		set_value: @(v){ if Color:is_lab(v) { discard(seq([@(){[ f[1].set_value(v.l_star), f[2].set_value(v.a_star), f[3].set_value(v.b_star) ]}, update_sample])) } }
	}
}
@round_str(num,p) {
	if num>=0&&num<Math:Infinity&&(Math:trunc(p)>0) {
		let s = Math:round(Core:range(1,Math:trunc(p)).reduce(@(b,c,i){b*10},num)).to_str()
		[ if s.len>Math:trunc(p) {''} else {'0'}, s.slice(0,s.len-Math:trunc(p)), '.', if s.len>=Math:trunc(p) {''} else {Core:range(1,Math:trunc(p)-s.len).map(@(i){'0'}).join()}, s.slice(s.len-Math:trunc(p),s.len) ].join()
	} elif num<=0&&num>(0-Math:Infinity)&&(Math:trunc(p)>0) {
		let s = Math:round(Core:range(1,Math:trunc(p)).reduce(@(b,c,i){b*10},0-num)).to_str()
		[ '-', if s.len>Math:trunc(p) {''} else {'0'}, s.slice(0,s.len-Math:trunc(p)), '.', if s.len>=Math:trunc(p) {''} else {Core:range(1,Math:trunc(p)-s.len).map(@(i){'0'}).join()}, s.slice(s.len-Math:trunc(p),s.len) ].join()
	} else {
		Math:round(num).to_str()
	}
}
@sround_str(num,p) {
	if num==0&&(Math:trunc(p)>0) {
		[ '0.', Core:range(1,Math:trunc(p)).map(@(i){'0'}).join() ].join()
	} elif num>0&&num<Math:Infinity&&(Math:trunc(p)>0) {
		let s = Math:round(Core:range(1,Math:trunc(p)).reduce(@(b,c,i){b*10},num)).to_str()
		[ '+', if s.len>Math:trunc(p) {''} else {'0'}, s.slice(0,s.len-Math:trunc(p)), '.', if s.len>=Math:trunc(p) {''} else {Core:range(1,Math:trunc(p)-s.len).map(@(i){'0'}).join()}, s.slice(s.len-Math:trunc(p),s.len) ].join()
	} elif num<0&&num>(0-Math:Infinity)&&(Math:trunc(p)>0) {
		let s = Math:round(Core:range(1,Math:trunc(p)).reduce(@(b,c,i){b*10},0-num)).to_str()
		[ '-', if s.len>Math:trunc(p) {''} else {'0'}, s.slice(0,s.len-Math:trunc(p)), '.', if s.len>=Math:trunc(p) {''} else {Core:range(1,Math:trunc(p)-s.len).map(@(i){'0'}).join()}, s.slice(s.len-Math:trunc(p),s.len) ].join()
	} else {
		Math:round(num).to_str()
	}
}
@srgb_sample_mfm(srgb) {
	let t = [ Color:srgb_to_hex24(Color:srgb(srgb.red,0,0)), Color:srgb_to_hex24(Color:srgb(0,srgb.green,0)), Color:srgb_to_hex24(Color:srgb(0,0,srgb.blue)), if Color:srgb_to_xyz(Color:srgb(srgb.red,0,0)).y>0.5 {'000'} else {'fff'}, if Color:srgb_to_xyz(Color:srgb(0,srgb.green,0)).y>0.5 {'000'} else {'fff'}, if Color:srgb_to_xyz(Color:srgb(0,0,srgb.blue)).y>0.5 {'000'} else {'fff'} ]
	`$[font.monospace $[bg.color={t[0]} $[fg.color={t[3]} R {round_str(srgb.red,3)}]], $[bg.color={t[1]} $[fg.color={t[4]} G {round_str(srgb.green,3)}]], $[bg.color={t[2]} $[fg.color={t[5]} B {round_str(srgb.blue,3)}]]]`
}
@hsv_sample_mfm(hsv) {
	let t = [ Color:srgb_to_hex24(Color:hsv_to_srgb(Color:hsv(hsv.hue,1,1))), Color:srgb_to_hex24(Color:hsv_to_srgb(Color:hsv(hsv.hue,hsv.saturation,1))), Color:srgb_to_hex24(Color:hsv_to_srgb(Color:hsv(0,0,hsv.value))), if Color:srgb_to_xyz(Color:hsv_to_srgb(Color:hsv(hsv.hue,1,1))).y>0.5 {'000'} else {'fff'}, if Color:srgb_to_xyz(Color:hsv_to_srgb(Color:hsv(hsv.hue,hsv.saturation,1))).y>0.5 {'000'} else {'fff'}, if Color:srgb_to_xyz(Color:hsv_to_srgb(Color:hsv(0,0,hsv.value))).y>0.5 {'000'} else {'fff'} ]
	`$[font.monospace $[bg.color={t[0]} $[fg.color={t[3]} H {round_str(hsv.hue,1)}]], $[bg.color={t[1]} $[fg.color={t[4]} S {round_str(hsv.saturation,3)}]], $[bg.color={t[2]} $[fg.color={t[5]} V {round_str(hsv.value,3)}]]]`
}
@hls_sample_mfm(hls) {
	let t = [ Color:srgb_to_hex24(Color:hls_to_srgb(Color:hls(hls.hue,0.5,1))), Color:srgb_to_hex24(Color:hls_to_srgb(Color:hls(0,hls.lightness,0))), Color:srgb_to_hex24(Color:hls_to_srgb(Color:hls(hls.hue,0.5,hls.saturation))), if Color:srgb_to_xyz(Color:hls_to_srgb(Color:hls(hls.hue,0.5,1))).y>0.5 {'000'} else {'fff'}, if Color:srgb_to_xyz(Color:hls_to_srgb(Color:hls(0,hls.lightness,0))).y>0.5 {'000'} else {'fff'}, if Color:srgb_to_xyz(Color:hls_to_srgb(Color:hls(hls.hue,0.5,hls.saturation))).y>0.5 {'000'} else {'fff'} ]
	`$[font.monospace $[bg.color={t[0]} $[fg.color={t[3]} H {round_str(hls.hue,1)}]], $[bg.color={t[1]} $[fg.color={t[4]} L {round_str(hls.lightness,3)}]], $[bg.color={t[2]} $[fg.color={t[5]} S {round_str(hls.saturation,3)}]]]`
}
@ycbcr_sample_mfm(ycbcr) {
	let t = [ Color:srgb_to_hex24(Color:ycbcr_to_srgb(Color:ycbcr(ycbcr.illuminance,0,0))), Color:srgb_to_hex24(Color:ycbcr_to_srgb(Color:ycbcr(ycbcr.illuminance,ycbcr.cb,0))), Color:srgb_to_hex24(Color:ycbcr_to_srgb(Color:ycbcr(ycbcr.illuminance,0,ycbcr.cr))), if Color:srgb_to_xyz(Color:ycbcr_to_srgb(ycbcr)).y>0.5 {'000'} else {'fff'} ]
	`$[font.monospace $[bg.color={t[0]} $[fg.color={t[3]} Y {round_str(ycbcr.illuminance,3)}]], $[bg.color={t[1]} $[fg.color={t[3]} Cb {sround_str(ycbcr.cb,3)}]], $[bg.color={t[2]} $[fg.color={t[3]} Cr {sround_str(ycbcr.cr,3)}]]]`
}
@xyy_sample_mfm(xyy) {
	let t = [ Color:srgb_to_hex24(Color:xyz_to_srgb(Color:xyy_to_xyz(Color:xyy(xyy.point_x,Color:xyz_to_xyy(Color:whitepoint()).point_y,xyy.illuminance)))), Color:srgb_to_hex24(Color:xyz_to_srgb(Color:xyy_to_xyz(Color:xyy(Color:xyz_to_xyy(Color:whitepoint()).point_x,xyy.point_y,xyy.illuminance)))), Color:srgb_to_hex24(Color:xyz_to_srgb(Color:xyy_to_xyz(Color:xyy(Color:xyz_to_xyy(Color:whitepoint()).point_x,Color:xyz_to_xyy(Color:whitepoint()).point_y,xyy.illuminance)))), if xyy.illuminance>0.5 {'000'} else {'fff'} ]
	`$[font.monospace $[bg.color={t[0]} $[fg.color={t[3]} x {round_str(xyy.point_x,4)}]], $[bg.color={t[1]} $[fg.color={t[3]} y {round_str(xyy.point_y,4)}]], $[bg.color={t[2]} $[fg.color={t[3]} Y {round_str(xyy.illuminance,4)}]]]`
}
@lab_sample_mfm(lab) {
	let t = [ Color:srgb_to_hex24(Color:xyz_to_srgb(Color:lab_to_xyz(Color:lab(lab.l_star,0,0)))), Color:srgb_to_hex24(Color:xyz_to_srgb(Color:lab_to_xyz(Color:lab(lab.l_star,lab.a_star,0)))), Color:srgb_to_hex24(Color:xyz_to_srgb(Color:lab_to_xyz(Color:lab(lab.l_star,0,lab.b_star)))), if Color:lab_to_xyz(lab).y>0.5 {'000'} else {'fff'} ]
	`$[font.monospace $[bg.color={t[0]} $[fg.color={t[3]} L* {round_str(lab.l_star,2)}]], $[bg.color={t[1]} $[fg.color={t[3]} a* {sround_str(lab.a_star,2)}]], $[bg.color={t[2]} $[fg.color={t[3]} b* {sround_str(lab.b_star,2)}]]]`
}
@sample_header(name, srgb) {
	var t = [ name, srgb ]
	let ui = [ Ui:C:container({ padding: 8, children: [] }), Ui:C:mfm({ text: '', size: 2 }), Ui:C:text({ text: '' }) ]
	@u() {[ ui[0].update({ bgColor: `rgb({srgb.red*100}%,{srgb.green*100}%,{srgb.blue*100}%)`, children: [ ui[1], ui[2] ] }), ui[1].update({ text: name, color: if Color:xyz_to_xyy(Color:srgb_to_xyz(srgb)).illuminance>0.5 {'#000'} else {'#FFF'} }), ui[2].update({ text: if Color:is_insrgbgamut(srgb) { `#{Color:srgb_to_hex24(srgb)}` } else { tr().out_gamut() }, color: if Color:xyz_to_xyy(Color:srgb_to_xyz(srgb)).illuminance>0.5 {'#000'} else {'#FFF'}, size: if (name.len>0)||(!Color:is_insrgbgamut(srgb)) {0.8} else {2} }) ]}
	u()
	{ ui: ui[0], name: @(){ t[0] }, color: @(){ t[1] }, set_name: @(v){ discard(seq([ @(){ t[0] = v }, @(){ u() } ])) }, set_color: @(v){ discard(seq([ @(){ t[1] = v }, @(){ u() } ])) } }
}
@sample_elements(srgb) {
	var t = [ srgb ]
	let ui = [ Ui:C:mfm({ text: '' }) ]
	@u() {ui[0].update({ text: [ tr().srgbcolor(), srgb_sample_mfm(srgb), tr().hsvcolor(), hsv_sample_mfm(Color:srgb_to_hsv(srgb)), tr().hlscolor(), hls_sample_mfm(Color:srgb_to_hls(srgb)), tr().ycbcrcolor(), ycbcr_sample_mfm(Color:srgb_to_ycbcr(srgb)), tr().xyycolor(), xyy_sample_mfm(Color:xyz_to_xyy(Color:srgb_to_xyz(srgb))), tr().labcolor(), lab_sample_mfm(Color:xyz_to_lab(Color:srgb_to_xyz(srgb)))].join(Str:lf) })}
	u()
	{ ui: ui[0], color: @(){ t[0] }, set_color: @(v){ discard(seq([ @(){ t[0] = v }, @(){ u() } ])) } }
}
@sample_schemes(srgb, on_click) {
	var t = [ srgb ]
	let ui = [ Ui:C:container({ children: [] }) ]
	@hue_shift(srgb, hue) {
		let hls = Color:srgb_to_hls(srgb)
		Color:hls_to_srgb(Color:hls(hls.hue + hue, hls.lightness, hls.saturation))
	}
	@complementary(srgb) { if Color:srgb_to_hls(srgb).saturation>0 { color_list_mfm(tr().scheme_complementary(), [ { name: '', color: srgb }, { name: '', color: hue_shift(srgb, 180) } ], ', ', on_click) } else { null }}
	@triads(srgb) { if Color:srgb_to_hls(srgb).saturation>0 { color_list_mfm(tr().scheme_triads(), [ { name: '', color: srgb }, { name: '', color: hue_shift(srgb, 120) }, { name: '', color: hue_shift(srgb, 240) } ], ', ', on_click) } else { null }}
	@analogous(srgb) { if Color:srgb_to_hls(srgb).saturation>0 { color_list_mfm(tr().scheme_analogous(), [ { name: '', color: srgb }, { name: '', color: hue_shift(srgb, 30) }, { name: '', color: hue_shift(srgb, 330) } ], ', ', on_click) } else { null }}
	@splitcomp(srgb) { if Color:srgb_to_hls(srgb).saturation>0 { color_list_mfm(tr().scheme_splitcomp(), [ { name: '', color: srgb }, { name: '', color: hue_shift(srgb, 150) }, { name: '', color: hue_shift(srgb, 210) } ], ', ', on_click) } else { null }}
	@tetrad(srgb) { if Color:srgb_to_hls(srgb).saturation>0 { color_list_mfm(tr().scheme_tetrad(), [ { name: '', color: srgb }, { name: '', color: hue_shift(srgb, 90) }, { name: '', color: hue_shift(srgb, 180) }, { name: '', color: hue_shift(srgb, 270) } ], ', ', on_click) } else { null }}
	@pentad(srgb) { if Color:srgb_to_hls(srgb).saturation>0 { color_list_mfm(tr().scheme_pentad(), [ { name: '', color: srgb }, { name: '', color: hue_shift(srgb, 72) }, { name: '', color: hue_shift(srgb, 144) }, { name: '', color: hue_shift(srgb, 216) }, { name: '', color: hue_shift(srgb, 288) } ], ', ', on_click) } else { null }}
	@hexad(srgb) { if Color:srgb_to_hls(srgb).saturation>0 { color_list_mfm(tr().scheme_hexad(), [ { name: '', color: srgb }, { name: '', color: hue_shift(srgb, 60) }, { name: '', color: hue_shift(srgb, 120) }, { name: '', color: hue_shift(srgb, 180) }, { name: '', color: hue_shift(srgb, 240) }, { name: '', color: hue_shift(srgb, 300) } ], ', ', on_click) } else { null }}
	@u() {ui[0].update({ children: [ complementary(t[0]), triads(t[0]), analogous(t[0]), splitcomp(t[0]), tetrad(t[0]), pentad(t[0]), hexad(t[0]) ].filter(@(i){ Core:type(i)!='null' }) })}
	u()
	{ ui: ui[0], color: @(){ t[0] }, set_color: @(v){ discard(seq([ @(){ t[0] = v }, @(){ u() } ])) } }
}
@color_sample(name, srgb) {
	let t = [ sample_header(name, srgb), sample_elements(srgb), sample_schemes(srgb, null) ]
	let ui = Ui:C:container({ children: [t[0].ui, Ui:C:folder({ title: tr().elements(), children: [ t[1].ui ], opened: true }), Ui:C:folder({ title: tr().scheme(), children: [ t[2].ui ], opened: true })] })
	{ ui: ui, name: @(){ t[0].name() }, color: @(){ t[0].color() }, set_name: @(v){ discard([ t[0].set_name(v) ]) }, set_color: @(v){ discard([ t[0].set_color(v), t[1].set_color(v), t[2].set_color(v) ]) } }
}

@to_srgb() {
	match colorspace {
		'hex' => if Core:type(Color:hex_to_srgb(colorpicker.get_value()))!='error' {Color:hex_to_srgb(colorpicker.get_value())} else {Color:srgb(0,0,0)}
		'srgb' => colorpicker.get_value()
		'hsv' => Color:hsv_to_srgb(colorpicker.get_value())
		'hls' => Color:hls_to_srgb(colorpicker.get_value())
		'ycbcr' => Color:ycbcr_to_srgb(colorpicker.get_value())
		'xyy' => Color:xyz_to_srgb(Color:xyy_to_xyz(colorpicker.get_value()))
		'lab' => Color:xyz_to_srgb(Color:lab_to_xyz(colorpicker.get_value()))
	}
}
@render_picker() {
	colorspaceselect.update({default: colorspace})
	Ui:render([colorspaceselect,colorpicker.form,submitbutton])
}
@render_sample() {
	submitbutton.update({disabled: true})
	colorpicker.set_value(colorpicker.get_value())
	Ui:render([backbutton,color_sample('', to_srgb()).ui])
	submitbutton.update({disabled: false})
}
@update_colorspace(sp) {
	match sp {
		'hex' => colorpicker = hexinput(Color:srgb_to_hex24(to_srgb()))
		'srgb' => colorpicker = srgbinput(to_srgb())
		'hsv' => colorpicker = hsvinput(Color:srgb_to_hsv(to_srgb()))
		'hls' => colorpicker = hlsinput(Color:srgb_to_hls(to_srgb()))
		'ycbcr' => colorpicker = ycbcrinput(Color:srgb_to_ycbcr(to_srgb()))
		'xyy' => colorpicker = xyyinput(Color:xyz_to_xyy(Color:srgb_to_xyz(to_srgb())))
		'lab' => colorpicker = labinput(Color:xyz_to_lab(Color:srgb_to_xyz(to_srgb())))
	}
	colorspace = sp
	render_picker()
}

var colorpicker = hexinput(null)
var colorspace = 'hex'
let colorspaceselect = Ui:C:select({
	label: tr().colorspace(), items: [
		{text: tr().hexcolor(), value: 'hex'},
		{text: tr().srgbcolor(), value: 'srgb'},
		{text: tr().hsvcolor(), value: 'hsv'},
		{text: tr().hlscolor(), value: 'hls'},
		{text: tr().ycbcrcolor(), value: 'ycbcr'},
		{text: tr().xyycolor(), value: 'xyy'},
		{text: tr().labcolor(), value: 'lab'},
	], default: colorspace, onChange: update_colorspace
})

let submitbutton = Ui:C:button({text: 'Submit', primary: true, onClick: render_sample})
let backbutton = Ui:C:button({text: 'Back', primary: true, onClick: render_picker})

render_picker()
