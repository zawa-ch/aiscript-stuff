/// 0.13.3
@Poker() {
	let SUITS = {
		spade: { rank: 0, name: 'spade', symbol: '♠', color: null },
		heart: { rank: 1, name: 'heart', symbol: '♥', color: 'e11' },
		diamond: { rank: 2, name: 'diamond', symbol: '♦', color: 'e11' },
		club: { rank: 3, name: 'club', symbol: '♣', color: null },
	}
	let NUMBERS = {
		ace: { rank: 0, name: 'ace', symbol: 'A' }
		king: { rank: 1, name: 'king', symbol: 'K' }
		queen: { rank: 2, name: 'queen', symbol: 'Q' }
		jack: { rank: 3, name: 'jack', symbol: 'J' }
		ten: { rank: 4, name: 'ten', symbol: '10' }
		nine: { rank: 5, name: 'nine', symbol: '9' }
		eight: { rank: 6, name: 'eight', symbol: '8' }
		seven: { rank: 7, name: 'seven', symbol: '7' }
		six: { rank: 8, name: 'six', symbol: '6' }
		five: { rank: 9, name: 'five', symbol: '5' }
		four: { rank: 10, name: 'four', symbol: '4' }
		three: { rank: 11, name: 'three', symbol: '3' }
		two: { rank: 12, name: 'two', symbol: '2' }
	}
	@Card(suits, number, card) {
		@to_mfm() {
			[
				if Core:type(suits.color) == 'str' { `$[fg.color={suits.color} ` } else { '' }
				card
				if Core:type(suits.color) == 'str' { ']' } else { '' }
			].join()
		}
		@to_string() {
			`{number.name} of {suits.name}`
		}
		@to_symbol() {
			`{suits.symbol}{number.symbol}`
		}
		{ suits: suits, number: number, card: card, to_mfm: to_mfm, to_string: to_string, to_symbol: to_symbol }
	}
	@card_comp(l, r) { if l.number.rank == r.number.rank { if l.suits.rank == r.suits.rank { 0 } elif l.suits.rank > r.suits.rank { 1 } else { -1 } } elif l.number.rank > r.number.rank { 1 } else { -1 } }
	let DECK_BASE = [
		Card(SUITS.spade, NUMBERS.ace, '🂡'), Card(SUITS.heart, NUMBERS.ace, '🂱'), Card(SUITS.diamond, NUMBERS.ace, '🃁'), Card(SUITS.club, NUMBERS.ace, '🃑'),
		Card(SUITS.spade, NUMBERS.king, '🂮'), Card(SUITS.heart, NUMBERS.king, '🂾'), Card(SUITS.diamond, NUMBERS.king, '🃎'), Card(SUITS.club, NUMBERS.king, '🃞'),
		Card(SUITS.spade, NUMBERS.queen, '🂭'), Card(SUITS.heart, NUMBERS.queen, '🂽'), Card(SUITS.diamond, NUMBERS.queen, '🃍'), Card(SUITS.club, NUMBERS.queen, '🃝'),
		Card(SUITS.spade, NUMBERS.jack, '🂫'), Card(SUITS.heart, NUMBERS.jack, '🂻'), Card(SUITS.diamond, NUMBERS.jack, '🃋'), Card(SUITS.club, NUMBERS.jack, '🃛'),
		Card(SUITS.spade, NUMBERS.ten, '🂪'), Card(SUITS.heart, NUMBERS.ten, '🂺'), Card(SUITS.diamond, NUMBERS.ten, '🃊'), Card(SUITS.club, NUMBERS.ten, '🃚'),
		Card(SUITS.spade, NUMBERS.nine, '🂩'), Card(SUITS.heart, NUMBERS.nine, '🂹'), Card(SUITS.diamond, NUMBERS.nine, '🃉'), Card(SUITS.club, NUMBERS.nine, '🃙'),
		Card(SUITS.spade, NUMBERS.eight, '🂨'), Card(SUITS.heart, NUMBERS.eight, '🂸'), Card(SUITS.diamond, NUMBERS.eight, '🃈'), Card(SUITS.club, NUMBERS.eight, '🃘'),
		Card(SUITS.spade, NUMBERS.seven, '🂧'), Card(SUITS.heart, NUMBERS.seven, '🂷'), Card(SUITS.diamond, NUMBERS.seven, '🃇'), Card(SUITS.club, NUMBERS.seven, '🃗'),
		Card(SUITS.spade, NUMBERS.six, '🂦'), Card(SUITS.heart, NUMBERS.six, '🂶'), Card(SUITS.diamond, NUMBERS.six, '🃆'), Card(SUITS.club, NUMBERS.six, '🃖'),
		Card(SUITS.spade, NUMBERS.five, '🂥'), Card(SUITS.heart, NUMBERS.five, '🂵'), Card(SUITS.diamond, NUMBERS.five, '🃅'), Card(SUITS.club, NUMBERS.five, '🃕'),
		Card(SUITS.spade, NUMBERS.four, '🂤'), Card(SUITS.heart, NUMBERS.four, '🂴'), Card(SUITS.diamond, NUMBERS.four, '🃄'), Card(SUITS.club, NUMBERS.four, '🃔'),
		Card(SUITS.spade, NUMBERS.three, '🂣'), Card(SUITS.heart, NUMBERS.three, '🂳'), Card(SUITS.diamond, NUMBERS.three, '🃃'), Card(SUITS.club, NUMBERS.three, '🃓'),
		Card(SUITS.spade, NUMBERS.two, '🂢'), Card(SUITS.heart, NUMBERS.two, '🂲'), Card(SUITS.diamond, NUMBERS.two, '🃂'), Card(SUITS.club, NUMBERS.two, '🃒'),
	]
	@is_flush(cardarr) { cardarr.reduce(@(a,i,n){ if Core:type(a) != 'null' { { suits: a.suits, result: a.result && ( a.suits.rank == i.suits.rank ) } } else { { suits: i.suits, result: true } } }, null).result }
	@is_straight(cardarr) { cardarr.sort(card_comp).reduce(@(a,i,n){ if Core:type(a) != 'null' { { rank: i.number.rank, result: a.result && (( (a.rank + 1) == i.number.rank ) || ( a.rank == 0 && i.number.rank == 9 )) } } else { { rank: i.number.rank, result: true } } }, null).result }
	@is_royalstraight(cardarr) { cardarr.sort(card_comp).reduce(@(a,i,n){ if Core:type(a) != 'null' { { rank: a.rank + 1, result: a.result && ( (a.rank + 1) == i.number.rank ) } } else { { rank: 0, result: i.number.rank == 0 } } }, null).result }
	@aggregate_pairs(cardarr) {
		cardarr.reduce(@(a,i,n){
			let f = a.find(@(ai,an){ ai.number.rank == i.number.rank })
			if Core:type(f) != 'null' { f.cards.push(i) } else { a.push({ number: i.number, cards: [i] }) }
			a
		}, [])
	}
	let HAND_ROLES = [
		{ rank: 0, name: 'royal straight flush', check: @(cardarr) { is_flush(cardarr) && is_royalstraight(cardarr) } }
		{ rank: 1, name: 'straight flush', check: @(cardarr) { is_flush(cardarr) && is_straight(cardarr) } }
		{ rank: 2, name: 'four of a kind', check: @(cardarr) { aggregate_pairs(cardarr).filter(@(i,n){ i.cards.len >= 4 }).len >= 1 } }
		{ rank: 3, name: 'full house', check: @(cardarr) { (aggregate_pairs(cardarr).filter(@(i,n){ i.cards.len == 3 }).len >= 1) && (aggregate_pairs(cardarr).filter(@(i,n){ i.cards.len == 2 }).len >= 1) } }
		{ rank: 4, name: 'flush', check: @(cardarr) { is_flush(cardarr) } }
		{ rank: 5, name: 'straight', check: @(cardarr) { is_straight(cardarr) } }
		{ rank: 6, name: 'three of a kind', check: @(cardarr) { aggregate_pairs(cardarr).filter(@(i,n){ i.cards.len >= 3 }).len >= 1 } }
		{ rank: 7, name: 'two pair', check: @(cardarr) { aggregate_pairs(cardarr).filter(@(i,n){ i.cards.len >= 2 }).len >= 2 } }
		{ rank: 8, name: 'one pair', check: @(cardarr) { aggregate_pairs(cardarr).filter(@(i,n){ i.cards.len >= 2 }).len >= 1 } }
		{ rank: 9, name: 'high card', check: @(cardarr) { true } }
	]
	@CardBundle(cardarr) {
		var data = if Core:type(cardarr) == 'arr' { cardarr.copy() } else { [] }

		@add(card) {
			data.push(card)
		}
		@remove(index) {
			let r = data[index]
			data = data.filter(@(i,n){ n != index })
			r
		}
		@sort() {
			data = data.sort(card_comp)
		}
		{ cards: @() { data }, count: @(){ data.len }, add: add, remove: remove, sort: sort }
	}
	@Hands(table) {
		var hand = CardBundle(null)
		for 5 { hand.add(table.pick_card()) }
		hand.sort()
		@to_role() {
			var r = HAND_ROLES.copy()
			r = r.filter(@(i,n){ i.check(hand.cards()) })
			if r.len > 0 { r[0] } else { null }
		}
		@to_string() {
			hand.cards().map(@(i,n){ i.card }).join()
		}
		@to_mfm() {
			hand.cards().map(@(i,n){ i.to_mfm() }).join()
		}
		{ cards: @(){ hand }, to_role: to_role, to_string: to_string, to_mfm: to_mfm }
	}
	@Table(seed) {
		var deck = CardBundle(DECK_BASE)
		let rand = Math:gen_rng(seed)
		@pick_card() {
			let i = rand(0, deck.count() - 1)
			deck.remove(i)
		}
		{ deck: @(){ deck }, pick_card: pick_card }
	}

	{ create_table: @(seed) { Table(seed) }, create_hand: @(table) { Hands(table) } }
}
