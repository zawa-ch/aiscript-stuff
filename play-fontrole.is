/// @ 0.17.0
### {
    name: "フォント10連ガチャ！"
    author: "zawa-ch."
    version: "1.0.0"
    description: "文字通りフォントの10連ガチャです。登録フォント数151、排出確率はN60%,R25%,SR10%,SSR5%(レアリティ選定基準は独断と偏見によるもの)"
    license: {
        name: "MIT License"
        href: "http://www.opensource.org/licenses/mit-license.php"
    }
}
let HASHTAG = "#フォント10連ガチャ"

:: Dataset {
@get(sourceIds,merge) {
	sourceIds.map(@(i){
		let page = Mk:api("pages/show", {pageId: i})
		if Core:type(page) == 'error' { return Error:create('dataset.apierror',{pageId: i, inner_error: {name: page.name, info: page.info}}) }
		let json = Json:parse(page.content[0].text)
		if Core:type(json) != 'error' { json } else { Error:create('dataset.jsonerror',{pageId: i, inner_error: {name: json.name, info: json.info}}) }
	}).reduce(@(b,c,i){if Core:type(b)!='error' { if Core:type(c)!='error' { merge(b, c) } else {c}} else {b}})
}
}

let lottery_data = Dataset:get([
	// ここにデータソースのpage IDを記述します
], @(l,r){ l.concat(r) })

@on_draw(result) {
    Ui:render([
        Ui:C:container({
            children: [
                Ui:C:mfm({ text: result.text })
                Ui:C:mfm({ text: `<small><small>ID: {result.id}</small></small>` })
            ]
        })
        Ui:C:container({
            align: 'center'
            children: [
                Ui:C:buttons({
                    buttons: [
                        {
                            text: "引きなおす"
                            onClick: @(){ draw(Util:uuid() on_draw) }
                        }
                    ]
                })
                Ui:C:postFormButton({
                    text: "投稿する"
                    rounded: true
                    primary: true
                    form: {
                        text: `{result.text}{Str:lf}{HASHTAG}{Str:lf}{THIS_URL}`
                    }
                })
            ]
        })
    ])
}

let weight_subtotal = {
    common: lottery_data.common.weight
    uncommon: lottery_data.common.weight + lottery_data.uncommon.weight
    rare: lottery_data.common.weight + lottery_data.uncommon.weight + lottery_data.rare.weight
    epic: lottery_data.common.weight + lottery_data.uncommon.weight + lottery_data.rare.weight + lottery_data.epic.weight
}
let weight_total = weight_subtotal.epic
@get_category(rnd_f) {
    let value = rnd_f(0 weight_total)
    if value < weight_subtotal.common { lottery_data.common }
    elif value < weight_subtotal.uncommon { lottery_data.uncommon }
    elif value < weight_subtotal.rare { lottery_data.rare }
    elif value < weight_subtotal.epic { lottery_data.epic }
    else {
        <: "error: reached unreachable code."
        null
    }
}

@get_item(cat rnd_f) {
    let cl = cat.fonts.len
    let i = rnd_f(0 cl)
    cat.fonts[i]
}

@draw(id drawcallback) {
    var text = `フォント10連ガチャ結果！{Str:lf}`
    var data = []
    let random = Math:gen_rng(`{USER_ID}:{id}`)
    for let i, 10 {
        let cat = get_category(random)
        let item = get_item(cat random)
        data.push({ category: cat.name, item: item })
        text = `{text}[{cat.name}] {item}{Str:lf}`
    }
    drawcallback({ id: id, text: text })
}

draw(Util:uuid() on_draw)
